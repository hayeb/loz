WHITESPACE = _{ " " | "\t"}
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

number = @{
      ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
}

float = @{ ASCII_DIGIT ~ "." ~ ASCII_DIGIT+ }

identifier = @{
    (LOWERCASE_LETTER | "_") ~ (LETTER | DECIMAL_NUMBER | "_" )*
}

capital_identifier = @{ UPPERCASE_LETTER ~ (LETTER | DECIMAL_NUMBER | "_")*}

char_literal = @{
    "'" ~ (CASED_LETTER | TITLECASE_LETTER) ~ "'"
}

string_literal = ${
    "\"" ~ string_inner ~ "\""
}

string_inner = @{
    string_char*
}

string_char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

// f a b c
function_header = ${ (!"where" ~ identifier ) ~ (WHITESPACE+ ~match_expression)* }

// f a b c = a
//  ...
// where
//  ...
// .
function_body = {
        function_header
    ~   function_rules_body
    ~   local_definitions?
}

// | a == "Hello" = c
// # d = g a b c
// = d
function_rules_body = _{
        (function_let_rule | function_conditional_rule)*
    ~   function_expression_rule?
}
    function_let_rule = {NEWLINE ~ ( "let" | "#") ~ match_expression ~ "=" ~ expression}

    function_conditional_rule = { NEWLINE ~ function_conditional }
        function_conditional = {
            "|" ~ expression ~ "=" ~ expression
        }

    function_expression_rule = { NEWLINE* ~ "=" ~ expression }

    local_definitions = {NEWLINE+ ~ "where" ~ NEWLINE+ ~ ((function_type_definition | function_body | type_definition) ~ NEWLINE*)* ~ "."}

// f :: Int Char -> Int
function_type_definition = { identifier ~ "::" ~ loz_top_type  ~ NEWLINE+ }

loz_top_type = _{
    function_type
    | loz_type_term
    | custom_type
}

loz_type_term = _{
    bool_type
    | string_type
    | int_type
    | char_type
    | float_type
    | tuple_type
    | list_type
    | type_variable
    | "(" ~ loz_type_term ~ ")"
    | "(" ~ function_type ~ ")"
    | "(" ~ custom_type ~ ")"
}

type_variable = @{LOWERCASE_LETTER+}

bool_type = { "Bool"}
string_type = {"String"}
int_type = {"Int"}
float_type = { "Float" }
char_type = {"Char"}
list_type = { "[" ~ loz_top_type ~ "]"}
custom_type = { capital_identifier ~ loz_type_term*}
custom_type_single = {capital_identifier}
function_type = {
    ((loz_type_term | custom_type_single )~ NEWLINE*)+ ~ NEWLINE? ~ "->" ~ NEWLINE? ~ (loz_top_type | custom_type | custom_type_single)
}

tuple_type = { "(" ~ loz_type_term ~ ("," ~ loz_type_term)+ ~ ")" }

call = {
    identifier ~ function_argument+
}

function_argument = {
    simple_term
    | identifier
}

simple_term = _{
    bool_literal
    | string_literal
    | char_literal
    | float
    | number
    | subexpr
    | negation
    | minus
    | tuple_literal
    | list_literal
    | record_term
}

minus = @{"-" ~ expression}

term = {
      simple_term
    | lambda
    | case_expression
    | adt_term
    | call // Function call
    | identifier // Variable reference
}

lambda = { lambda_header ~ expression}

    lambda_header = ${"\\" ~ WHITESPACE* ~ match_expression ~ (WHITESPACE* ~ match_expression)* ~ WHITESPACE* ~ "."}

case_expression = {
    "case" ~ function_argument ~ "of"~ NEWLINE
        ~ case_expression_rule
        ~ ("," ~ NEWLINE ~ case_expression_rule)*
}

case_expression_rule = {
    match_expression ~ "=>" ~ expression
}

adt_term = { capital_identifier ~ expression*}
record_term = {"{" ~ capital_identifier ~ "|" ~ NEWLINE? ~ record_field_term ~ NEWLINE? ~ ("," ~ NEWLINE? ~ record_field_term)* ~ NEWLINE? ~ "}"}
    record_field_term = {identifier ~ "=" ~ expression}

tuple_literal = !{ "(" ~ NEWLINE* ~ expression ~ NEWLINE* ~ ("," ~ NEWLINE* ~ expression)+ ~ NEWLINE* ~ ")" }
list_literal = _{ list_empty
    | list_singleton
    | list_shorthand
    | list_longhand
}

list_empty = {"[]"}
list_singleton = {"[" ~ NEWLINE* ~ expression ~ NEWLINE* ~ "]"}
list_shorthand = {"[" ~ NEWLINE* ~ expression ~ NEWLINE* ~ ("," ~ NEWLINE* ~ expression)* ~ NEWLINE* ~ "]"}
list_longhand = {"[" ~ NEWLINE* ~ expression ~ NEWLINE* ~ ":" ~ NEWLINE* ~ expression ~ NEWLINE* ~ "]"}

bool_literal = { "false" | "true" }
subexpr = { "(" ~ expression ~ ")" }
negation = { "!" ~ expression }

expression = {
    term ~ (operation ~ term)*
}

match_expression = !{
    match_term
}

match_wildcard = { "_" }

match_term = _{
    list_match
    | tuple_match
    | sub_match
    | adt_match
    | record_match
    | identifier
    | number
    | char_literal
    | string_literal
    | bool_literal
    | match_wildcard
}

tuple_match = {
    "(" ~ match_term ~ ("," ~ match_term)+ ~ ")"
}

list_match = _{
    list_match_empty
    | list_match_singleton
    | list_match_shorthand
    | list_match_longhand
}

sub_match = {"(" ~ match_term ~ ")"}
adt_match = { capital_identifier |
    "(" ~ capital_identifier ~ (match_term)* ~ ")" }
record_match = {"{" ~ capital_identifier ~ "|"  ~ identifier ~ ("," ~ identifier)* ~ "}"}

list_match_empty = { "[]" }
list_match_singleton = { "[" ~ match_term ~ "]" }
list_match_shorthand = { "[" ~ match_term ~ ("," ~ match_term)+ ~ "]" }
list_match_longhand = { "[" ~ match_term ~ ":" ~ match_term ~ "]" }

operation = _{
    times | divide | modulo

    | add | substract
    | shift_left | shift_right

    | lesser | leq | greater | greq

    | eq | neq

    | and

    | or

    | record_field_access

    }

    times = {"*"}
    divide = {"/"}
    modulo = {"%"}

    add = {"+"}
    substract = {"-"}

    shift_left = {"<<"}
    shift_right = {">>"}

    lesser = {"<"}
    leq = {"<="}
    greater = {">"}
    greq = {">="}

    eq = {"=="}
    neq = {"!="}

    and = {"&&"}
    or = {"||"}

    record_field_access = { "." }

adt_definition = {
    "::" ~ capital_identifier ~ adt_type_variables ~ "=" ~ NEWLINE? ~ adt_constructors ~ NEWLINE?
}
    adt_type_variables = { identifier* }
    adt_constructors = {adt_contructor ~ (NEWLINE* ~ "|" ~ adt_contructor)*}
    adt_contructor = {capital_identifier ~ loz_type_term*}

record_definition = {
    "::" ~ capital_identifier ~ record_type_variable ~ "=" ~ NEWLINE? ~ "{" ~ NEWLINE? ~ record_field_definitions ~ NEWLINE? ~ "}" ~ NEWLINE?
}
    record_type_variable = { identifier* }
    record_field_definitions = { record_field_definition ~ (NEWLINE? ~ "," ~ NEWLINE? ~ record_field_definition)*}
    record_field_definition = { identifier ~ "::" ~ loz_top_type }

type_definition = {
    adt_definition
    | record_definition
}

ast = {
   SOI ~  NEWLINE* ~ ((function_type_definition | function_body | type_definition) ~ NEWLINE*)* ~ NEWLINE* ~ EOI
}


