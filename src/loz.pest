WHITESPACE = _{ " " | "\t"}
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | "//" ~ (!NEWLINE ~ ANY) ~ NEWLINE }

number = @{
      ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
}

identifier = @{
    (LETTER | "_" ) ~ (LETTER | DECIMAL_NUMBER )*
}

char_literal = @{
    "'" ~ (CASED_LETTER | TITLECASE_LETTER) ~ "'"
}

string_literal = ${
    "\"" ~ string_inner ~ "\""
}

string_inner = @{
    string_char*
}

string_char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

function_definition = {
    PUSH(identifier) ~ NEWLINE* ~ "::" ~ NEWLINE* ~ function_type ~ NEWLINE+ ~ function_body+
}

loz_type = {
    "Bool"
    | "String"
    | "Int"
    | "Char"
}

function_header = ${ PEEK ~ (WHITESPACE+ ~ identifier)*}

function_conditional_rule = { NEWLINE ~ function_conditional}

function_expression_rule = {NEWLINE* ~ "=" ~ expression}

function_body = {
    function_header ~
    (
        function_conditional_rule* ~ function_expression_rule?
    ) ~ NEWLINE+
}

function_conditional = {
    "|" ~ expression ~ "=" ~ expression
}

function_type = {
    (loz_type ~ NEWLINE*)* ~ NEWLINE? ~ "->" ~ NEWLINE? ~ loz_type
}

call = {
    identifier ~ function_argument+
}

function_argument = {
    simple_term
    | identifier
}

simple_term = _{
      bool_literal
    | string_literal
    | char_literal
    | number
    | subexpr
    | negation
    | minus
}

minus = @{"-" ~ expression}

term = {
      simple_term
    | call // Function call
    | identifier // Variable reference
}
bool_literal = {"false" | "true"}
subexpr = {"(" ~ expression ~ ")"}
negation = {"!" ~ expression}

expression = { term ~ (operation ~ term)* }

operation = _{
        times | divide | modulo

    | add | substract
    | shift_left | shift_right

    | lesser | leq | greater | greq

    | eq | neq

    | and

    | or

    }

    times = {"*"}
    divide = {"/"}
    modulo = {"%"}

    add = {"+"}
    substract = {"-"}

    shift_left = {"<<"}
    shift_right = {">>"}

    lesser = {"<"}
    leq = {"<="}
    greater = {">"}
    greq = {">="}

    eq = {"=="}
    neq = {"!="}

    and = {"&&"}
    or = {"||"}

main = {"Main" ~ "=" ~ expression }

ast = {
   (function_definition ~ NEWLINE?)* ~ main
}

